#!/bin/bash

# This plugin hook executes the actual cosign operations.

# Setup
#######

# I would prefer to just execute the path pointed-to by this environment
# variable - but that is incompatible with the testing framework. As a
# result, we need to modify PATH to include the directory containing
# the cosign executable.
export PATH="${PATH}:${COSIGN_EXE_PATH%/*}"

# Helper functions
##################

fail_with_message() {
  display_error "$1" "$2"
  exit 1
}

display_error() {
  ctx="$1"
  message="$2"
  echo "ðŸš¨ $message" >&2
  buildkite-agent annotate --style error "$message<br />" --context "$ctx"
}

display_success() {
  ctx="$1"
  message="$2"
  echo "$message"
  buildkite-agent annotate --style success "$message<br />" --context "$ctx"
}

# if the supplied image reference does not contain a digest,
# try getting the local image digest to use it instead, and
# if that fails, warn then continue using the supplied image reference
use_image_digest() {
    if [[ $image != *"@sha256:"* ]]; then
        echo "--- :docker: Getting the local image digest for ${image}"

        local digest
        digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${image}")

        local status=$?
        if [[ $status -ne 0 ]]; then
            display_error "docker inspect" "Failed to get the local image digest, will continue using supplied image reference ${image}"
        else
            display_success "docker inspect" "Will continue using ${digest}"
            image="${digest}"
        fi
    fi
}

# Common parameters
###################

# image is a required parameter
image=${BUILDKITE_PLUGIN_COSIGN_IMAGE}
if [[ -z "${image}" ]]; then
    fail_with_message "cosign" "Image not specified"
fi
use_image_digest

# generate a random number to enable safe concurrent plugin runs
random="${RANDOM}"

# set the TUF root directory to a custom location
# ref: https://github.com/sigstore/sigstore/blob/b777e4be352ebf9394d534271f3dd888908e839a/pkg/tuf/client.go#L53-L54
export TUF_ROOT="${HOME}/.sigstore-${random}/root"

# set the output signature to a custom file name
sigfile="sigstore-${random}.sig"

# flags for the cosign sign command
sign_flags=("-y" "--output-signature" "${sigfile}")

is_keyless=${BUILDKITE_PLUGIN_COSIGN_KEYLESS:-true}

# Hook functions
################

# if provided, initialise cosign with a custom TUF configuration
cosign_init() {
    echo "--- :key: Init cosign"

    # flags for the cosign initialize command
    local init_flags=()

    if [[ "${is_keyless}" == true ]]; then
        local tuf_mirror_url=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_TUF_MIRROR_URL}
        local tuf_root_url=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_TUF_ROOT_URL}
    else
        local tuf_mirror_url=${BUILDKITE_PLUGIN_COSIGN_KEYED_CONFIG_TUF_MIRROR_URL}
        local tuf_root_url=${BUILDKITE_PLUGIN_COSIGN_KEYED_CONFIG_TUF_ROOT_URL}
    fi

    if [[ -n "${tuf_mirror_url}" ]]; then
        init_flags+=("--mirror" "${tuf_mirror_url}")
    fi

    if [[ -n "${tuf_root_url}" ]]; then
        init_flags+=("--root" "${tuf_root_url}")
    fi

    if [ ${#init_flags[@]} -gt 0 ]; then
        rm -rf "${TUF_ROOT}"

        cosign initialize "${init_flags[@]}"

        local status=$?
        if [[ $status -ne 0 ]]; then
            fail_with_message "cosign" "Failed to initialise"
        fi
        display_success "cosign" "Successfully initialised"
    else
        display_success "cosign" "Initialisation not required, skipping"
    fi
}

setup_keyless() {
    echo "--- :key: Setup cosign keyless signing"

    local rekor_url=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_REKOR_URL}
    if [[ -n "${rekor_url}" ]]; then
        sign_flags+=("--rekor-url" "${rekor_url}")
    fi

    local fulcio_url=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_FULCIO_URL}
    if [[ -n "${fulcio_url}" ]]; then
        sign_flags+=("--fulcio-url" "${fulcio_url}")
    fi

    local oidc_issuer=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_OIDC_ISSUER}
    if [[ -n "${oidc_issuer}" ]]; then
        sign_flags+=("--oidc-issuer" "${oidc_issuer}")
    fi

    local oidc_provider=${BUILDKITE_PLUGIN_COSIGN_KEYLESS_CONFIG_OIDC_PROVIDER:-"buildkite-agent"}
    if [[ -n "${oidc_provider}" ]]; then
        sign_flags+=("--oidc-provider" "${oidc_provider}")
    fi
}

setup_keyed() {
    echo "--- :key: Setup cosign keyed signing"

    local rekor_url=${BUILDKITE_PLUGIN_COSIGN_KEYED_CONFIG_REKOR_URL}
    if [[ -n "${rekor_url}" ]]; then
        sign_flags+=("--rekor-url" "${rekor_url}")
    fi

    local key=${BUILDKITE_PLUGIN_COSIGN_KEYED_CONFIG_KEY:-}
    if [[ -z "${key}" ]]; then
        fail_with_message "cosign" "Key not specified"
    fi

    if [[ ! -f "${key}" ]]; then
        fail_with_message "cosign" "Key file not found in path ${key}"
    fi

    sign_flags+=("--key" "${key}")
}

# sign the image
cosign_sign() {
    echo "--- :key: Signing image with cosign"

    rm -f "${sigfile}"

    cosign sign \
        "${sign_flags[@]}" \
        "${image}"

    local status=$?
    if [[ $status -ne 0 ]]; then
        fail_with_message "cosign" "Failed to sign image"
    fi

    local signature
    signature=$(cat "${sigfile}")

    display_success "cosign" "Successfully signed image"
    cat <<EOF | buildkite-agent annotate --style success --context "cosign-signature"
### Signed image
\`\`\`
$image
\`\`\`

### Signature
\`\`\`
$signature
\`\`\`
EOF

    rm -f "${sigfile}"
}

# Main
#######

cosign_init

if [[ "${is_keyless}" == true ]]; then
    setup_keyless
else
    setup_keyed
fi

cosign_sign
